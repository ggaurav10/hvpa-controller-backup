/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	v1alpha1 "k8s.io/autoscaler/hvpa-controller/pkg/apis/autoscaling/v1alpha1"
	"k8s.io/client-go/tools/cache"
)

// HvpaLister helps list Hvpas.
type HvpaLister interface {
	// List lists all Hvpas in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Hvpa, err error)
	// Hvpas returns an object that can list and get Hvpas.
	Hvpas(namespace string) HvpaNamespaceLister
	HvpaListerExpansion
}

// hvpaLister implements the HvpaLister interface.
type hvpaLister struct {
	indexer cache.Indexer
}

// NewHvpaLister returns a new HvpaLister.
func NewHvpaLister(indexer cache.Indexer) HvpaLister {
	return &hvpaLister{indexer: indexer}
}

// List lists all Hvpas in the indexer.
func (s *hvpaLister) List(selector labels.Selector) (ret []*v1alpha1.Hvpa, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Hvpa))
	})
	return ret, err
}

// Hvpas returns an object that can list and get Hvpas.
func (s *hvpaLister) Hvpas(namespace string) HvpaNamespaceLister {
	return hvpaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HvpaNamespaceLister helps list and get Hvpas.
type HvpaNamespaceLister interface {
	// List lists all Hvpas in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Hvpa, err error)
	// Get retrieves the Hvpa from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Hvpa, error)
	HvpaNamespaceListerExpansion
}

// hvpaNamespaceLister implements the HvpaNamespaceLister
// interface.
type hvpaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Hvpas in the indexer for a given namespace.
func (s hvpaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Hvpa, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Hvpa))
	})
	return ret, err
}

// Get retrieves the Hvpa from the indexer for a given namespace and name.
func (s hvpaNamespaceLister) Get(name string) (*v1alpha1.Hvpa, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hvpa"), name)
	}
	return obj.(*v1alpha1.Hvpa), nil
}
